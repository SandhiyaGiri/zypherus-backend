import { TranscriptBatch, TranscriptSegment } from '@zypherus/shared-types';

export interface CorrectionPromptOptions {
  domainHint?: string;
  allowPartial?: boolean;
  instructions?: string;
  terminology?: string[];
}

export function buildSystemPrompt(options: CorrectionPromptOptions = {}): string {
  const base = `You are an expert transcription editor. Your task is to correct text generated by an automatic speech recognition system in real time.`;
  const partial = options.allowPartial
    ? 'Return well-formed partial sentences when the input is incomplete.'
    : 'Return complete sentences only when the input sounds complete.';
  const domain = options.domainHint
    ? `If the conversation relates to ${options.domainHint}, preserve domain-specific terminology.`
    : 'Preserve speaker intent and wording where possible.';
  const glossary = options.terminology?.length
    ? `Always prefer the following terms exactly as written: ${options.terminology.join(', ')}.`
    : '';
  const extra = options.instructions ?? '';

  return [base, partial, domain, glossary, 'Avoid inventing content.', 'Keep punctuation natural.', extra]
    .filter(Boolean)
    .join(' ')
    .trim();
}

export function summariseSegments(segments: TranscriptSegment[]): string {
  return segments
    .map((segment) => {
      const timing = `${(segment.startMs / 1000).toFixed(2)}sâ†’${(segment.endMs / 1000).toFixed(2)}s`;
      return `- [${timing}] ${segment.text}`;
    })
    .join('\n');
}

export interface BuildMessagesParams {
  batch: TranscriptBatch;
  context: TranscriptSegment[];
  options?: CorrectionPromptOptions;
}

export function buildMessages({ batch, context, options }: BuildMessagesParams) {
  const system = buildSystemPrompt(options);
  const contextSummary = context.length
    ? `Context so far:\n${summariseSegments(context)}\n`
    : '';
  const batchSummary = summariseSegments(batch.segments);

  const user = `${contextSummary}Latest audio chunk:\n${batchSummary}\nRespond with the corrected version of the latest chunk.`;

  return {
    system,
    user,
  };
}
